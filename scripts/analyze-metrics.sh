#!/bin/bash

# üìä Script de An√°lisis de M√©tricas Automatizadas
# Carrito de Compras - Sistema de Calidad de C√≥digo

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuraci√≥n
PROJECT_NAME="CarritoComprasAPI"
BASE_URL="http://localhost:5063"
OUTPUT_DIR="./reports"
COVERAGE_THRESHOLD=80
COMPLEXITY_THRESHOLD=10
DEBT_THRESHOLD=24

echo -e "${BLUE}üöÄ INICIANDO AN√ÅLISIS DE M√âTRICAS AUTOMATIZADAS${NC}"
echo -e "${BLUE}================================================${NC}"
echo ""

# Funci√≥n para mostrar progreso
show_progress() {
    echo -e "${CYAN}‚ñ∂ $1${NC}"
}

# Funci√≥n para mostrar √©xito
show_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

# Funci√≥n para mostrar advertencia
show_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# Funci√≥n para mostrar error
show_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar que la API est√© corriendo
check_api_status() {
    show_progress "Verificando estado de la API..."
    
    if curl -s -f "$BASE_URL/api/metrics/report" > /dev/null 2>&1; then
        show_success "API de m√©tricas est√° corriendo correctamente"
    else
        show_error "La API no est√° disponible en $BASE_URL"
        echo -e "${YELLOW}Por favor, ejecute: dotnet run --project backend/src/CarritoComprasAPI${NC}"
        exit 1
    fi
}

# Crear directorio de reportes
setup_output_directory() {
    show_progress "Configurando directorio de reportes..."
    mkdir -p "$OUTPUT_DIR"
    show_success "Directorio de reportes creado: $OUTPUT_DIR"
}

# Obtener m√©tricas de complejidad ciclom√°tica
analyze_cyclomatic_complexity() {
    show_progress "Analizando complejidad ciclom√°tica..."
    
    local response=$(curl -s "$BASE_URL/api/metrics/cyclomatic-complexity")
    local avg_complexity=$(echo "$response" | jq -r '.averageComplexity')
    local total_methods=$(echo "$response" | jq -r '.totalMethods')
    local high_complexity=$(echo "$response" | jq -r '.highComplexityMethods | length')
    
    echo "$response" > "$OUTPUT_DIR/cyclomatic-complexity.json"
    
    echo -e "${PURPLE}üìä COMPLEJIDAD CICLOM√ÅTICA:${NC}"
    echo -e "   ‚Ä¢ Complejidad promedio: ${YELLOW}$avg_complexity${NC}"
    echo -e "   ‚Ä¢ Total de m√©todos: ${YELLOW}$total_methods${NC}"
    echo -e "   ‚Ä¢ M√©todos de alta complejidad: ${YELLOW}$high_complexity${NC}"
    
    if (( $(echo "$avg_complexity > $COMPLEXITY_THRESHOLD" | bc -l) )); then
        show_warning "Complejidad promedio ($avg_complexity) supera el umbral ($COMPLEXITY_THRESHOLD)"
        return 1
    else
        show_success "Complejidad dentro del rango aceptable"
        return 0
    fi
}

# Obtener m√©tricas de cobertura
analyze_code_coverage() {
    show_progress "Analizando cobertura de c√≥digo..."
    
    local response=$(curl -s "$BASE_URL/api/metrics/code-coverage")
    local line_coverage=$(echo "$response" | jq -r '.lineCoverage')
    local branch_coverage=$(echo "$response" | jq -r '.branchCoverage')
    local method_coverage=$(echo "$response" | jq -r '.methodCoverage')
    
    echo "$response" > "$OUTPUT_DIR/code-coverage.json"
    
    echo -e "${PURPLE}üìà COBERTURA DE C√ìDIGO:${NC}"
    echo -e "   ‚Ä¢ Cobertura de l√≠neas: ${YELLOW}${line_coverage}%${NC}"
    echo -e "   ‚Ä¢ Cobertura de ramas: ${YELLOW}${branch_coverage}%${NC}"
    echo -e "   ‚Ä¢ Cobertura de m√©todos: ${YELLOW}${method_coverage}%${NC}"
    
    if (( $(echo "$line_coverage < $COVERAGE_THRESHOLD" | bc -l) )); then
        show_warning "Cobertura de l√≠neas ($line_coverage%) est√° bajo el umbral ($COVERAGE_THRESHOLD%)"
        return 1
    else
        show_success "Cobertura de c√≥digo aceptable"
        return 0
    fi
}

# Obtener m√©tricas de deuda t√©cnica
analyze_technical_debt() {
    show_progress "Analizando deuda t√©cnica..."
    
    local response=$(curl -s "$BASE_URL/api/metrics/technical-debt")
    local total_debt=$(echo "$response" | jq -r '.totalDebtHours')
    local severity=$(echo "$response" | jq -r '.severityLevel')
    local issues_count=$(echo "$response" | jq -r '.topIssues | length')
    
    echo "$response" > "$OUTPUT_DIR/technical-debt.json"
    
    echo -e "${PURPLE}üí≥ DEUDA T√âCNICA:${NC}"
    echo -e "   ‚Ä¢ Total de horas: ${YELLOW}${total_debt}h${NC}"
    echo -e "   ‚Ä¢ Nivel de severidad: ${YELLOW}$severity${NC}"
    echo -e "   ‚Ä¢ N√∫mero de issues: ${YELLOW}$issues_count${NC}"
    
    if (( $(echo "$total_debt > $DEBT_THRESHOLD" | bc -l) )); then
        show_warning "Deuda t√©cnica ($total_debt h) supera el umbral ($DEBT_THRESHOLD h)"
        return 1
    else
        show_success "Deuda t√©cnica bajo control"
        return 0
    fi
}

# Obtener reporte completo
generate_comprehensive_report() {
    show_progress "Generando reporte completo..."
    
    local response=$(curl -s "$BASE_URL/api/metrics/report")
    echo "$response" > "$OUTPUT_DIR/comprehensive-report.json"
    
    local maintainability=$(echo "$response" | jq -r '.maintainabilityMetrics.maintainabilityIndex')
    
    echo -e "${PURPLE}üîß M√âTRICAS ADICIONALES:${NC}"
    echo -e "   ‚Ä¢ √çndice de mantenibilidad: ${YELLOW}$maintainability${NC}"
    
    show_success "Reporte completo generado"
}

# Exportar datos para an√°lisis externo
export_metrics_data() {
    show_progress "Exportando datos para an√°lisis externo..."
    
    curl -s "$BASE_URL/api/metrics/export" > "$OUTPUT_DIR/metrics-export.json"
    
    show_success "Datos exportados a $OUTPUT_DIR/metrics-export.json"
}

# Generar resumen ejecutivo
generate_executive_summary() {
    show_progress "Generando resumen ejecutivo..."
    
    local summary_file="$OUTPUT_DIR/executive-summary.md"
    
    cat > "$summary_file" << EOF
# üìä Resumen Ejecutivo - An√°lisis de M√©tricas de C√≥digo

**Proyecto:** $PROJECT_NAME  
**Fecha de an√°lisis:** $(date '+%Y-%m-%d %H:%M:%S')  
**Generado por:** Sistema de M√©tricas Automatizadas

## üéØ Estado General

EOF

    # Evaluar estado general basado en las m√©tricas
    local overall_status="‚úÖ EXCELENTE"
    local warnings=0
    
    # Verificar cada m√©trica
    if ! analyze_cyclomatic_complexity > /dev/null 2>&1; then
        warnings=$((warnings + 1))
    fi
    
    if ! analyze_code_coverage > /dev/null 2>&1; then
        warnings=$((warnings + 1))
    fi
    
    if ! analyze_technical_debt > /dev/null 2>&1; then
        warnings=$((warnings + 1))
    fi
    
    if [ $warnings -eq 1 ]; then
        overall_status="‚ö†Ô∏è BUENO (con observaciones)"
    elif [ $warnings -eq 2 ]; then
        overall_status="üî∂ NECESITA ATENCI√ìN"
    elif [ $warnings -ge 3 ]; then
        overall_status="üî¥ REQUIERE ACCI√ìN INMEDIATA"
    fi
    
    echo "**Estado general:** $overall_status" >> "$summary_file"
    echo "" >> "$summary_file"
    
    cat >> "$summary_file" << EOF
## üìà M√©tricas Principales

| M√©trica | Valor | Estado | Umbral |
|---------|-------|--------|--------|
| Complejidad Ciclom√°tica | $(curl -s "$BASE_URL/api/metrics/cyclomatic-complexity" | jq -r '.averageComplexity') | $([ $warnings -eq 0 ] && echo "‚úÖ" || echo "‚ö†Ô∏è") | < $COMPLEXITY_THRESHOLD |
| Cobertura de C√≥digo | $(curl -s "$BASE_URL/api/metrics/code-coverage" | jq -r '.lineCoverage')% | $([ $warnings -eq 0 ] && echo "‚úÖ" || echo "‚ö†Ô∏è") | > $COVERAGE_THRESHOLD% |
| Deuda T√©cnica | $(curl -s "$BASE_URL/api/metrics/technical-debt" | jq -r '.totalDebtHours')h | $([ $warnings -eq 0 ] && echo "‚úÖ" || echo "‚ö†Ô∏è") | < $DEBT_THRESHOLD h |

## üîß Recomendaciones

EOF

    if [ $warnings -eq 0 ]; then
        echo "- ‚úÖ **Excelente trabajo!** Todas las m√©tricas est√°n dentro de los rangos √≥ptimos" >> "$summary_file"
        echo "- üöÄ Continuar con las buenas pr√°cticas de desarrollo" >> "$summary_file"
        echo "- üìä Mantener el monitoreo continuo de m√©tricas" >> "$summary_file"
    else
        echo "- üîç **Revisar** las m√©tricas que est√°n fuera de los umbrales establecidos" >> "$summary_file"
        echo "- üìù **Planificar** actividades de refactoring para mejorar la calidad" >> "$summary_file"
        echo "- üß™ **Incrementar** la cobertura de tests unitarios" >> "$summary_file"
        echo "- üîÑ **Implementar** revisiones de c√≥digo m√°s estrictas" >> "$summary_file"
    fi
    
    cat >> "$summary_file" << EOF

## üìÅ Archivos Generados

- \`comprehensive-report.json\` - Reporte completo con todas las m√©tricas
- \`cyclomatic-complexity.json\` - An√°lisis detallado de complejidad
- \`code-coverage.json\` - M√©tricas de cobertura de tests
- \`technical-debt.json\` - An√°lisis de deuda t√©cnica
- \`metrics-export.json\` - Datos en formato para an√°lisis externo

## üåê Dashboard Web

Accede al dashboard interactivo en: $BASE_URL/dashboard

---
*Generado autom√°ticamente por el Sistema de M√©tricas de Carrito de Compras*
EOF

    show_success "Resumen ejecutivo generado: $summary_file"
}

# Funci√≥n principal
main() {
    echo -e "${BLUE}Proyecto: $PROJECT_NAME${NC}"
    echo -e "${BLUE}Fecha: $(date '+%Y-%m-%d %H:%M:%S')${NC}"
    echo ""
    
    # Ejecutar an√°lisis
    check_api_status
    setup_output_directory
    
    echo ""
    echo -e "${BLUE}üîç EJECUTANDO AN√ÅLISIS DE M√âTRICAS${NC}"
    echo -e "${BLUE}====================================${NC}"
    echo ""
    
    analyze_cyclomatic_complexity
    echo ""
    
    analyze_code_coverage
    echo ""
    
    analyze_technical_debt
    echo ""
    
    generate_comprehensive_report
    echo ""
    
    export_metrics_data
    echo ""
    
    generate_executive_summary
    echo ""
    
    echo -e "${GREEN}‚ú® AN√ÅLISIS COMPLETADO EXITOSAMENTE${NC}"
    echo -e "${GREEN}===================================${NC}"
    echo ""
    echo -e "${CYAN}üìÅ Reportes generados en: $OUTPUT_DIR${NC}"
    echo -e "${CYAN}üåê Dashboard web: $BASE_URL/dashboard${NC}"
    echo -e "${CYAN}üìä API de m√©tricas: $BASE_URL/api/metrics${NC}"
    echo ""
    echo -e "${YELLOW}üí° Pr√≥ximos pasos:${NC}"
    echo -e "   1. Revisar el resumen ejecutivo: ${YELLOW}$OUTPUT_DIR/executive-summary.md${NC}"
    echo -e "   2. Abrir el dashboard web para an√°lisis interactivo"
    echo -e "   3. Integrar con CI/CD para an√°lisis autom√°tico"
    echo ""
}

# Ejecutar script principal
main "$@"
